@startuml
!define ENABLE_INTERFACE 0x12345678

skinparam class {
	BackgroundColor White
	ArrowColor Black
	BorderColor Black
}

class STAR_SPW_DEVICE << struct >>  {
  hwInfo : STAR_CFG_MK2_HARDWARE_INFO
  deviceId : STAR_DEVICE_ID
  deviceType : STAR_DEVICE_TYPE
  channelMask : STAR_CHANNEL_MASK
  versionStr[STAR_CFG_MK2_VERSION_STR_MAX_LEN] : char
  buildDateStr[STAR_CFG_MK2_BUILD_DATE_STR_MAX_LEN] : char
 clockRateParams : STAR_CFG_MK2_BASE_TRANSMIT_CLOCK	
}

class STAR_SPW_INTERFACE << struct >> {
deviceId :  STAR_DEVICE_ID
channelId : STAR_CHANNEL_ID
channelDir : STAR_CHANNEL_DIRECTION 

pTxPath : STAR_SPACEWIRE_ADDRESS *
pRxPath : STAR_SPACEWIRE_ADDRESS *
pTxStream :  struct STAR_STREAM_ITEM  *
pRxStream : struct STAR_STREAM_ITEM *
}


class if_manager {
#star_dev_lst : STAR_DEVICE_ID *
#star_dev_nr :  uint8_t 
#star_dev_info : struct STAR_SPW_DEVICE 
#_TX_BAUDRATE_MUL = 2 : const uint32_t
#_TX_BAUDRATE_DIV = 4 : const uint32_t 
-channels : std::vector<ch_controller *>
-if_status : uint8_t 

+if_manager()
+deviceInfo () : void
+SPW_Init() :void
+SPW_SetBaudrate(uint8_t channelNumber) : void
+SPW_Open () : void
+SPW_Close() : void
+Spw_LoopBackTest() : void
}


class ch_controller {
-struct STAR_SPW_INTERFACE spw_dev_ch;
-thread_op_lst : std::vector<std::thread> 
#rxOp_item_nr = 1 : const int32_t 
#RX_OPERATION_TIMEOUT = 10 : const int32_t 
+ch_controller(STAR_DEVICE_ID dev_id)
+open(uint32_t channelNumber, STAR_CHANNEL_DIRECTION dir): bool
+receive() : void
+transmit() : void
-rx_operation_handler() : void
+close() : void
}

if_manager "1" o-- "*"  ch_controller: manages
if_manager o-- STAR_SPW_DEVICE: implements
ch_controller o-- STAR_SPW_INTERFACE: implements

@enduml
